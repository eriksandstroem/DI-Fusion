# Sequence parameters
sequence_type: "scene3d.SCENE3DSequence"
sequence_kwargs:
  path: "/cluster/work/cvl/esandstroem/data/scene3d/copyroom/"
  start_frame: 0
  end_frame: -1                          # Run all frames
  first_tq: [0.0, 0.0, -2.25, 0.0, 0.0, 0.0, 1.0] #[-1.4, 1.5, 1.5, 0.0, -1.0, 0.0, 0.0]     # Starting pose
  load_gt: True # specifies loading the gt trajectory

# Network parameters (network structure, etc. will be inherited from the training config)
training_hypers: "ckpt/default/hyper.json"
using_epoch: 300

# Separate tracking and meshing.
run_async: false
# Enable visualization
vis: false
resolution: 2

# These two define the range of depth observations to be cropped. Unit is meter.
depth_cut_min: 0.0
depth_cut_max: 12.3

meshing_interval: 1
integrate_interval: 1

# Mapping parameters
mapping:
  # Bound of the scene to be reconstructed
  bound_min: [-5, -5, -5] # tof [-5, -5, -5], mvs [] real: [-1.98, -1.24, -1.78]
  bound_max: [5, 5, 5] # tof [5, 5, 5],  mvs [] real: [4.30, 1.88, 2.61]
  voxel_size: 0.02
  # Prune observations if detected as noise.
  prune_min_vox_obs: 0
  ignore_count_th: 0.0
  encoder_count_th: 600.0

# Tracking parameters
tracking:
  # An array defining how the camera pose is optimized.
  # Each element is a dictionary:
  #   For example {"n": 2, "type": [['sdf'], ['rgb', 1]]} means to optimize the summation of sdf term and rgb term
  # at the 1st level pyramid for 2 iterations.
  iter_config:
    - {"n": 10, "type": [['rgb', 2]]}
    - {"n": 10, "type": [['sdf'], ['rgb', 1]]}
    - {"n": 50, "type": [['sdf'], ['rgb', 0]]}
  sdf:
    robust_kernel: "huber"
    robust_k: 5.0
    subsample: 0.5
  rgb:
    weight: 500.0
    robust_kernel: null
    robust_k: 0.01
    min_grad_scale: 0.0
    max_depth_delta: 0.2
