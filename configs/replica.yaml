# Sequence parameters
sequence_type: "replica.REPLICASequence"
sequence_kwargs:
  path: "/cluster/work/cvl/esandstroem/data/replica/manual/hotel_0/3"
  start_frame: 0
  end_frame: -1                 # Run all frames
  first_tq: [0.0, 0.0, -2.25, 0.0, 0.0, 0.0, 1.0] # [-1.4, 1.5, 1.5, 0.0, -1.0, 0.0, 0.0]     # Starting pose
  load_gt: True

# Network parameters (network structure, etc. will be inherited from the training config)
training_hypers: "ckpt/default/hyper.json"
using_epoch: 300

# Separate tracking and meshing.
run_async: false
# Enable visualization
vis: false
resolution: 2

# These two define the range of depth observations to be cropped. Unit is meter.
depth_cut_min: 0.0
depth_cut_max: 12.3 # check effect of this - no difference

meshing_interval: 1 # check effect of this - no difference
integrate_interval: 1 # check effect of this - difference - lower means better reconstruction

# Mapping parameters
mapping:
  # Bound of the scene to be reconstructed
  bound_min: [-3, -4, -4] # [-2.91, -1.65, -1.04] # [-4, -4, -4] for office 0 (-2.1, -3.16, -1.17),  [-3, -4, -4] for hotel 0 (-2.91, -1.65, -1.04), [-2, -3.5, -5] for office 4 (-1.21, -2.33, -1.21)
  bound_max: [7.1, 4, 4] # [4, 4, 4] for office 0 (2.42, 1.90, 1.83), [7.1, 4, 4] for hotel 0 (5.69, 2.52, 1.71), [7.1, 3, 3] for office 4 (5.35, 4.18, 1.61)
  voxel_size: 0.02
  # Prune observations if detected as noise.
  prune_min_vox_obs: 0 # check effect of this - has an effect. Only way to run it is with 0, otherwise it fails.
  ignore_count_th: 0 # check effect of this - has an effect. This seems to be the same as weight thresholding
  encoder_count_th: 600.0 # check effect of this. Small effect. Lower seems noisier. Over 600, no difference essentially.

# Tracking parameters
tracking:
  # An array defining how the camera pose is optimized.
  # Each element is a dictionary:
  #   For example {"n": 2, "type": [['sdf'], ['rgb', 1]]} means to optimize the summation of sdf term and rgb term
  # at the 1st level pyramid for 2 iterations.
  iter_config:
    - {"n": 10, "type": [['rgb', 2]]}
    - {"n": 10, "type": [['sdf'], ['rgb', 1]]}
    - {"n": 50, "type": [['sdf'], ['rgb', 0]]}
  sdf:
    robust_kernel: "huber"
    robust_k: 5.0
    subsample: 0.5
  rgb:
    weight: 500.0
    robust_kernel: null
    robust_k: 0.01
    min_grad_scale: 0.0
    max_depth_delta: 0.2
